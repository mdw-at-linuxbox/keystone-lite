---
## needs shade 1.8 or better, on the control node.
##  I'm using shade 1.20 on degu. (degu:~mdw/wp/python.17)

- name: add projects
  tags: ['ap','au']
  os_project:
     auth: &awesome_stuff
        auth_url: "{{ keystone_method }}://{{ keystone_fqdn }}:5000/v3/"
        username: admin
        password: "{{ keystone_admin_password }}"
        project_name: admin
        user_domain_name: "Default"
        project_domain_name: "Default"
# SHOULD work, but instead hafta export OS_IDENTITY_API_VERSION=3
#        identity_api_version: 3
     state: "{{ item.state | default(omit) }}"
     name: "{{ item.name }}"
     description: "{{ item.description | default(omit) }}"
     domain_id: "{{ item.domain_id | default('default') }}"
     enabled: "{{ item.enabled | default(omit) }}"
     validate_certs: yes
  register: os_project_result
  environment: { OS_IDENTITY_API_VERSION: 3 }
  delegate_to: localhost
  with_items: "{{ openstack_keystone_projects }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: compute project ids for projects
  tags: ['ap', 'au']
  set_fact:
    id_for_projects: "{{ id_for_projects | default({}) | combine( {item.project.name: item.project.domain_id } ) }}"
  with_items: "{{ os_project_result.results }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: computed project ids for projects
  tags: ['ap','au']
  debug:
    msg: "os_project_result={{ id_for_projects }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: generate default passwords
  tags: au
  set_fact:
    default_passwords: "{{ default_passwords | default({'admin':keystone_admin_password }) | combine( {item.name: item.password if item.password is defined else
lookup('password', '/dev/null length=15 chars=ascii_letters,digits')
 } ) }}"
    cacheable: yes
  with_items: "{{ openstack_keystone_users }}"

#- name: print my generated passwords
#  tags: au
#  debug:
#    msg: "user={{ item }} pw={{ default_passwords[item] }}"
#  with_items: "{{ default_passwords }}"
#

- name: add users
  tags: au
  os_user:
    auth:
      <<: *awesome_stuff
    state: "{{ item.state | default(omit) }}"
    name: "{{ item.name }}"
    domain: "{{ item.domain | default('default') }}"
    enabled: "{{ item.enabled | default(omit) }}"
    password: "{{ default_passwords[item.name] }}"
    update_password: "{{ item.update_password | default('on_create') }}"
    validate_certs: yes
  register: os_user_result
  environment: { OS_IDENTITY_API_VERSION: 3 }
  delegate_to: localhost
  with_items: "{{ openstack_keystone_users }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: add roles
  tags: au
  os_keystone_role:
     auth:
      <<: *awesome_stuff
     state: "{{ item.state | default(omit) }}"
     name: "{{ item.name }}"
     validate_certs: yes
  environment: { OS_IDENTITY_API_VERSION: 3 }
  delegate_to: localhost
  with_items: "{{ openstack_keystone_roles }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: add users to roles
  tags: au
  os_user_role:
     auth:
      <<: *awesome_stuff
     state: "{{ item.state | default(omit) }}"
     user: "{{ item.user | default(omit) }}"
     group: "{{ item.group | default(omit) }}"
     role: "{{ item.role }}"
     project: "{{ item.project }}"
     domain: "{{ item.domain | default(omit) }}"
     validate_certs: yes
  environment: { OS_IDENTITY_API_VERSION: 3 }
  delegate_to: localhost
  with_items: "{{ openstack_keystone_user_roles }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: compute user projects
  tags: au
  set_fact:
    project_for_users: "{{ project_for_users | default({'admin': 'admin'}) | combine( {item.user: item.project } ) }}"
  with_items: "{{ openstack_keystone_user_roles }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: make rcs for these users
  tags: au
  debug:
    msg: "item={{ item }}"
  with_items: "{{ (os_user_result.results | selectattr('changed') | map(attribute=('user')) | list) + [{'name': 'admin', 'domain_id': 'default'}] }}"
# list | combine( {'name': 'admin', 'domain_id': 'default'} ) }}"

- name: make openrc files
  tags: au
  template:
    src: openrc.j2
    dest: "out/{{ item.name }}-openrc"
  delegate_to: localhost
  with_items: "{{ (os_user_result.results | selectattr('changed') | map(attribute=('user')) | list) + [{'name': 'admin', 'domain_id': 'default'}] }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: install clear-rc script
  copy:
    src: clear-rc
    dest: "{{ ansible_user_dir }}/"
    mode: 0755

- name: install openrc scripts
  copy:
    src: "{{ item }}"
    dest: "{{ ansible_user_dir }}/"
    mode: 0755
  with_fileglob:
    - "out/*"
